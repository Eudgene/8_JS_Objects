Это задание повышенной сложности. Если у вас не получилось решить его за разумный срок (пару часов), то не тратьте время, просто посмотрите решение учителя.

map.js
Реализуйте и экспортируйте набор функций, для работы со словарём, построенным на хеш-таблице. Для простоты, наша реализация не поддерживает разрешение коллизий.

По сути в этом задании надо реализовать объекты. По понятным причинам использовать объекты для создания объектов нельзя. Представьте что в языке объектов нет и мы их хотим добавить.

make() — создаёт новый словарь
set(map, key, value) — устанавливает в словарь значение по ключу. Работает и для создания и для изменения. Функция возвращает true, если удалось установить значение. При возникновении коллизии, функция никак не меняет словарь и возвращает false.
get(map, key, defaultValue = null) — возвращает значение указанного ключа. Параметр defaultValue — значение, которое функция возвращает, если в словаре нет ключа (по умолчанию равно null). При возникновении коллизии функция также возвращает значение по умолчанию.
Функции set() и get() принимают первым параметром словарь. Передача идёт по ссылке, поэтому set() может изменить его напрямую.

import { make, set, get } from './map.js';

const map = make();
let result = get(map, 'key');
console.log(result); // => null

result = get(map, 'key', 'default_value');
console.log(result); // => "default_value"

set(map, 'key2', 'value2');
result = get(map, 'key2');
console.log(result); // => "value2"
Подсказки
Для внутреннего представления словаря, используйте массив, где индекс содержит хеш записи, а значение — key и value (их можно упаковать в массив).
Документация crc-32


import crc32 from 'crc-32';

// BEGIN (write your solution here)
export const make = () => {
  const map = [];
  return map;
};

export const set = (map, key, value) => {
  const hash = crc32.str(key);
  const index = Math.abs(hash) % 1000;
  if (map[index] === undefined) {
    map[index] = [key, value];
    return true;
  }
  const [k] = map[index];
  if (k === key) {
    map[index] = [key, value];
    return true;
  }
  return false;
};

export const get = (map, key, defaultValue = null) => {
  const hash = crc32.str(key);
  const index = Math.abs(hash) % 1000;
  if (map[index] !== undefined) {
    const [k, v] = map[index];
    if (k === key) {
      return v;
    }
    return defaultValue;
  }
  return defaultValue;
};
