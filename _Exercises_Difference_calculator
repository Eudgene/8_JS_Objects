Иногда в программировании возникает задача поиска разницы между двумя наборами данных, такими как объекты. Например, при поиске различий в json файлах. Для этого даже существуют специальные сервисы, например, http://www.jsondiff.com/ (попробуйте нажать на ссылку sample data и затем кнопку Compare).

solution.js
Реализуйте и экспортируйте по умолчанию функцию, которая сравнивает два объекта массива и возвращает результат сравнения в виде объекта. Ключами результирующего объекта будут все ключи из двух входящих объектов, а значением строка с описанием отличий: added, deleted, changed или unchanged.

Возможные значения:

added — ключ отсутствовал в первом объекте, но был добавлен во второй
deleted — ключ был в первом объекте, но отсутствует во втором
changed — ключ присутствовал и в первом и во втором объектах, но значения отличаются
unchanged — ключ присутствовал и в первом и во втором объектах с одинаковыми значениями
import genDiff from './diffGenerator.js';

genDiff(
  { one: 'eon', two: 'two', four: true },
  { two: 'own', zero: 4, four: true },
);
// {
//   one: 'deleted',
//   two: 'changed',
//   four: 'unchanged',
//   zero: 'added',
// }
Подсказки
Фрагмент этой задачи разбирается в докладе "Ментальное программирование"


import _ from 'lodash';

// BEGIN (write your solution here)
const genDiff = (obj1, obj2) => {
  const result = {};
  const changes = {
    a: 'added', d: 'deleted', c: 'changed', u: 'unchanged',
  };
  const copyOfObj1 = { ...obj1 };
  const newObj = Object.assign(copyOfObj1, obj2);
  const entries = Object.entries(newObj);
  for (const [key] of entries) {
    if (_.has(obj1, key)) {
      if (_.has(obj2, key) && obj1[key] === obj2[key]) {
        result[key] = changes.u;
      } else if (!_.has(obj2, key)) {
        result[key] = changes.d;
      } else {
        result[key] = changes.c;
      }
    } else if (_.has(obj2, key)) {
      result[key] = changes.a;
    }
  }
  return result;
};
export default genDiff;
